{"Name":"Cheeseknife","Id":698,"Alias":"cheeseknife","Description":"Cheeseknife\n==========\n\nInspired by the Java `Butter Knife` library for Android, Cheeseknife is a view injection library for Xamarin.Android to ease the pain of manually resolving each and every one of your Android views and events in your view lifecycles. Injection occurs at runtime rather than compile time and uses C# attributes to mark Android view member fields for injection.\n\nConsider this typical code to wire up your Android views and events:\n\n```csharp\npublic class ExampleActivity : Activity {\n\tTextView textView1;\n\tTextView textView2;\n\tTextView textView3;\n\tButton button;\n\tListView listView;\n\n\tprotected override void OnCreate(Bundle bundle) {\n\t\tbase.OnCreate(bundle);\n\t\tSetContentView(Resource.Layout.main_activity);\n\t\t\n\t\ttextView1 = FindViewById\u003cTextView\u003e(Resource.Id.text_view1);\n\t\ttextView2 = FindViewById\u003cTextView\u003e(Resource.Id.text_view2);\n\t\ttextView3 = FindViewById\u003cTextView\u003e(Resource.Id.text_view3);\n\t\tbutton = FindViewById\u003cButton\u003e(Resource.Id.button);\n\t\tlistView = FindViewById\u003cListView\u003e(Resource.Id.list_view);\n\t\t\n\t\tbutton.Click += (object sender, EventArgs e) {\n\t\t\t...\r\t\t}\n\t\tlistView.ItemClick += (object sender, AdapterView.ItemClickEventArgs e) {\n\t\t\t...\r\t\t}\t\t\n\t}\n}\n```\n\nWith Cheeseknife, you can do this:\n\n```csharp\npublic class ExampleActivity : Activity {\n\t[InjectView(Resource.Id.text_view1)] TextView textView1;\n\t[InjectView(Resource.Id.text_view2)] TextView textView2;\n\t[InjectView(Resource.Id.text_view3)] TextView textView3;\n\t[InjectView(Resource.Id.button)] Button button;\n\t[InjectView(Resource.Id.list_view)] ListView listView;\n\t\n\t[InjectOnClick(Resource.Id.button)]\n\tvoid OnClickButton(object sender, EventArgs e) {\n\t\t// This code will run when the button is clicked ...\n\t}\n\t[InjectOnItemClick(Resource.Id.list_view)]\n\tvoid OnClickListView(object sender, AdapterView.ItemClickEventArgs e) {\n\t\t// This code will run when at item in listView is clicked ...\n\t}\n\n\tprotected override void OnCreate(Bundle bundle) {\n\t\tbase.OnCreate(bundle);\n\t\tSetContentView(Resource.Layout.main_activity);\n\t\tCheeseknife.Inject(this);\n\t\t// All done! All views and events are wired up!\n\t}\n}\n```","Version":"1.0","Summary":"Cheeseknife - Xamarin.Android view injection library","QuickStart":"Getting started\n--------------------------------------------------\nFollow the examples below or open the sample project to see how to use Cheeseknife.\n\nUsage - Activity\n---------------------\n```csharp\npublic class ExampleActivity : Activity {\n\t[InjectView(Resource.Id.myTextView)]\n\tTextView textView;\n\t\n\t[InjectOnClick(Resource.Id.myButton)]\n\tvoid OnClickMyButton(object sender, EventArgs e) {\n\t\t// This code will run when the button is clicked ...\n\t}\n\n\tprotected override void OnCreate(Bundle bundle) {\n\t\tbase.OnCreate(bundle);\n\t\tSetContentView(Resource.Layout.main_activity);\n\t\tCheeseknife.Inject(this);\n\t\ttextView.Text = \"This text view reference was injected!\";\n\t}\n}\n```\nUsage - Fragment\n-------------------------\n```csharp\npublic class ExampleFragment : Fragment {\n\t[InjectView(Resource.Id.list_view)]\n\tListView listView;\n\t\n\t[InjectOnItemClick(Resource.Id.list_view)]\n\tvoid OnListViewItemClick(object sender, AdapterView.ItemClickEventArgs e) {\n\t\t// This code will run when a list item is clicked ...\n\t}\n\n\tpublic override View OnCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n\t\tvar view = inflater.Inflate(Resource.Layout.list_sample_fragment, null);\n\t\tCheeseknife.Inject(this, view);\n\t\t// Do your fragment initialisation here, all views will be available...\n\t\treturn view;\n\t}\n\n\tpublic override void OnDestroyView() {\n\t\tbase.OnDestroyView();\n\t\tCheeseknife.Reset(this);\n\t}\n}\n```\nUsage - List adapter with ViewHolder pattern\n-----------------------------------------------------------\n```csharp\npublic class ListSampleAdapter : BaseAdapter {\n\tpublic override View GetView(int position, View convertView, ViewGroup parent) {\n\t\tViewHolder viewHolder;\n\n\t\tif(convertView == null) {\n\t\t\tconvertView = LayoutInflater\n\t\t\t\t.From(MainApplication.Context)\n\t\t\t\t.Inflate(Resource.Layout.list_sample_list_item, parent, false);\n\t\t\tviewHolder = new ViewHolder(convertView);\n\t\t\tconvertView.Tag = viewHolder;\n\t\t} else {\n\t\t\tviewHolder = (ViewHolder)convertView.Tag;\n\t\t}\n\n\t\tviewHolder.TitleView.Text = listData[position];\n\t\t\n\t\treturn convertView;\n\t}\n\n\tclass ViewHolder : Java.Lang.Object {\n\t\t[InjectView(Resource.Id.title_text_view)]\n\t\tpublic TextView TitleView { get; private set; }\n\n\t\tpublic ViewHolder(View view) {\n\t\t\tCheeseknife.Inject(this, view);\n\t\t}\n\t}\n}\n```\nSupported Cheeseknife events\n------------------------------------------\n\nCheeseknife supports some of the most common Android view events:\n\n__Click Event - applied to View objects__\n\n```csharp\n[InjectOnClick(Resource.Id.some_view)]\nvoid SomeMethodName(object sender, EventArgs e) { ... }\n```\n__Touch Event - applied to View objects__\n\n```csharp\n[InjectOnTouch(Resource.Id.some_view)]\nvoid SomeMethodName(object sender, View.TouchEventArgs e) { ... }\n```\n__Long Click Event - applied to View objects__\n\n```csharp\n[InjectOnLongClick(Resource.Id.some_view)]\nvoid SomeMethodName(object sender, View.LongClickEventArgs e) { ... }\n```\n__Item Click Event - applied to AdapterView objects__\n\n```csharp\n[InjectOnItemClick(Resource.Id.some_list_view)]\nvoid SomeMethodName(object sender, AdapterView.ItemClickEventArgs e) { ... }\n```\n__Item Long Click Event - applied to AdapterView objects__\n\n```csharp\n[InjectOnItemLongClick(Resource.Id.some_list_view)]\nvoid SomeMethodName(object sender, AdapterView.ItemLongClickEventArgs e) { ... }\n```\n__Focus Change Event - applied to View objects__\n\n```csharp\n[InjectOnFocusChange(Resource.Id.some_view)]\nvoid SomeMethodName(object sender, View.FocusChangeEventArgs e) { ... }\n```\n__Checked Change Event - applied to CompoundButton objects__\n\n```csharp\n[InjectOnCheckedChange(Resource.Id.some_compound_button_view)]\nvoid SomeMethodName(object sender, CompoundButton.CheckedChangeEventArgs e) { ... }\n```\n__Text Changed Event - applied to TextView objects__\n\n```csharp\n[InjectOnTextChanged(Resource.Id.some_text_view)]\nvoid SomeMethodName(object sender, Android.Text.TextChangedEventArgs e) { ... }\n```\n__Text Editor Action Event - applied to TextView objects__\n\n```csharp\n[InjectOnEditorAction(Resource.Id.some_text_view)]\nvoid SomeMethodName(object sender, TextView.EditorActionEventArgs e) { ... }\n```\nAdding more Cheeseknife events\n--------------------------------------------\n\nIf you would like Cheeseknife to support other Android view events you can edit `Cheeseknife.cs` if you are using the source file version of the library, and add your own injection attributes. There are three steps to include a new event, for this example we will register the `Scroll` event found on `ListView` objects.\n\nStep 1 - Create a new annotation class\n----------------------------------------------------\n\nEach injection annotation is its own class. To make a new annotation, you just need to make a new class that has the same structure as the other Cheeseknife annotation classes. For our `Scroll` event, add the following class to `Cheeseknife.cs`:\n\n```csharp\n[AttributeUsage(AttributeTargets.Method)]\npublic class InjectOnScroll : BaseInjectionAttribute {\n\tpublic InjectOnScroll(int resourceId) : base(resourceId) { }\n}\n```\nStep 2 - Registering the annotation with Cheeseknife\n----------------------------------------------------------------------\nThe annotation and string name of the Xamarin exposed event needs to be registered in the main Cheeseknife class so it can be found via reflection during injection:\n\n```csharp\nstatic Dictionary\u003cType, string\u003e GetInjectableEvents() {\n\tvar types = new Dictionary\u003cType, string\u003e();\t\n\t...\t\n\ttypes.Add(typeof(InjectOnScroll), \"Scroll\");\n\n\treturn types;\n}\n```\nStep 3 - Preventing the Xamarin linker from stripping the event\n-----------------------------------------------------------------------------------\nBy default if you don\u0027t actually reference an event in your code, the linker will strip it out during a release build which will make your app implode and probably make kittens cry somewhere.\n\nTo prevent this, we need to make a dummy reference (that will never actually be used) to `preserve` the event we want to use.\n\n```csharp\n[Preserve]\nstatic void InjectionEventPreserver() {\n\t...\n\tnew ListView(null).Scroll += (s, e) =\u003e {};\n}\n```\nAll done! How to use your new injection annotation\n-------------------------------------------------------------------\nYou can now use your new injection annotation in your Android app. For our example you could use the following code to inject the `Scroll` event onto a ListView. Note that you need to match the signature of your custom method to be the same as if you had added the event manually via the Xamarin APIs ie  `object sender, AbsListView.ScrollEventArgs e)`:\n\n```csharp\npublic class ExampleActivity : Activity {\n\t[InjectOnScroll(Resource.Id.list_view)]\n\tvoid OnListViewScroll(object sender, AbsListView.ScrollEventArgs e) {\n\t\t// This code will run when the list view scrolls ...\n\t}\n\n\tprotected override void OnCreate(Bundle bundle) {\n\t\tbase.OnCreate(bundle);\n\t\tSetContentView(Resource.Layout.main_activity);\n\t\tCheeseknife.Inject(this);\n\t}\n}\n```\n","Hash":"92f7b1cb26372da8b1c0e9683a8a354e","TargetPlatforms":["android"],"TrialHash":null}