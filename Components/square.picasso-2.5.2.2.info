{"Name":"Picasso","Id":2004,"Alias":"square.picasso","Description":"# Picasso Details\r\n\r\n\u003ciframe src=\"https://appetize.io/embed/5w3cj57pegnx0av5kkacytd80r?device=nexus5\u0026scale=75\u0026autoplay=true\u0026orientation=portrait\u0026deviceColor=black\" \r\n        width=\"300px\" height=\"597px\" frameborder=\"0\" scrolling=\"no\"\r\n        style=\"float: right;margin-left:24px;\"\u003e\u0026nbsp;\u003c/iframe\u003e\r\n\r\n\u003e A powerful **image downloading** and **caching** library for Android.\r\n\r\nImages add much-needed context and visual flair to Android applications.\r\nPicasso allows for hassle-free image loading in your application -- often in one\r\nline of code!\r\n\r\n    Picasso.With(context)\r\n           .Load(\"http://i.imgur.com/DvpvklR.png\")\r\n           .Into(imageView);\r\n\r\nMany common pitfalls of image loading on Android are handled automatically by\r\nPicasso:\r\n\r\n  * Handling `ImageView` recycling and download cancelation in an adapter.\r\n  * Complex image transformations with minimal memory use.\r\n  * Automatic memory and disk caching.\r\n\r\n## Features\r\n\r\n### Adapter Downloads\r\n\r\nAdapter re-use is automatically detected and the previous download canceled:\r\n\r\n    public override View GetView(int position, View convertView, ViewGroup parent) {\r\n        SquaredImageView view = (SquaredImageView) convertView;\r\n        if (view == null) {\r\n            view = new SquaredImageView(context);\r\n        }\r\n      \r\n        string url = this[position];\r\n        Picasso.With(context).Load(url).Into(view);\r\n    }\r\n\r\n### Image Transformations\r\n\r\nTransform images to better fit into layouts and to reduce memory size:\r\n\r\n    Picasso.With(context)\r\n           .Load(url)\r\n           .Resize(50, 50)\r\n           .CenterCrop()\r\n           .Into(imageView);\r\n\r\nYou can also specify custom transformations for more advanced effects:\r\n\r\n    public class CropSquareTransformation : Java.Lang.Object, ITransformation\r\n    {\r\n        public Bitmap Transform(Bitmap source)\r\n        {\r\n            int size = Math.Min(source.Width, source.Height);\r\n            int x = (source.Width() - size) / 2;\r\n            int y = (source.Height() - size) / 2;\r\n            Bitmap result = Bitmap.CreateBitmap(source, x, y, size, size);\r\n            if (result != source) {\r\n                source.Recycle();\r\n            }\r\n            return result;\r\n        }\r\n    \r\n        public string Key\r\n        {\r\n            get { return \"square()\"; } \r\n        }\r\n    }\r\n\r\nPass an instance of this class to the `Transform` method:\r\n\r\n    Picasso.With(context)\r\n           .Load(\"http://i.imgur.com/DvpvklR.png\")\r\n           .Transform(new CropSquareTransformation())\r\n           .Into(imageView);\r\n\r\n### Place Holders\r\n\r\nPicasso supports both download and error placeholders as optional features:\r\n\r\n    Picasso.With(context)\r\n           .Load(url)\r\n           .Placeholder(Resource.Drawable.placeholder)\r\n           .Error(Resource.Drawable.error)\r\n           .Into(imageView);\r\n\r\nA request will be retried three times before the error placeholder is shown.\r\n\r\n### Resource Loading\r\n\r\nResources, assets, files, content providers are all supported as image\r\nsources:\r\n\r\n    // resources\r\n    Picasso.With(context)\r\n           .Load(Resource.Drawable.landing_screen)\r\n           .Into(imageView1);\r\n    // assets\r\n    Picasso.With(context)\r\n           .Load(\"file:///android_asset/DvpvklR.png\")\r\n           .Into(imageView2);\r\n    // files\r\n    Picasso.With(context)\r\n           .Load(new File(\"...\"))\r\n           .Into(imageView3);\r\n","Version":"2.5.2.2","Summary":"A powerful image downloading and caching library for Android.","QuickStart":"# Getting Started with Picasso\r\n\r\n\u003ciframe src=\"https://appetize.io/embed/5w3cj57pegnx0av5kkacytd80r?device=nexus5\u0026scale=75\u0026autoplay=true\u0026orientation=portrait\u0026deviceColor=black\" \r\n        width=\"300px\" height=\"597px\" frameborder=\"0\" scrolling=\"no\"\r\n        style=\"float: right;margin-left:24px;\"\u003e\u0026nbsp;\u003c/iframe\u003e\r\n\r\n\u003e A powerful **image downloading** and **caching** library for Android.\r\n\r\nImages add much-needed context and visual flair to Android applications.\r\nPicasso allows for hassle-free image loading in your application -- often in one\r\nline of code!\r\n\r\n    Picasso.With(context)\r\n           .Load(\"http://i.imgur.com/DvpvklR.png\")\r\n           .Into(imageView);\r\n\r\nMany common pitfalls of image loading on Android are handled automatically by\r\nPicasso:\r\n\r\n  * Handling `ImageView` recycling and download cancelation in an adapter.\r\n  * Complex image transformations with minimal memory use.\r\n  * Automatic memory and disk caching.\r\n\r\n## Features\r\n\r\n### Adapter Downloads\r\n\r\nAdapter re-use is automatically detected and the previous download canceled:\r\n\r\n    public override View GetView(int position, View convertView, ViewGroup parent) {\r\n        SquaredImageView view = (SquaredImageView) convertView;\r\n        if (view == null) {\r\n            view = new SquaredImageView(context);\r\n        }\r\n      \r\n        string url = this[position];\r\n        Picasso.With(context).Load(url).Into(view);\r\n    }\r\n\r\n### Image Transformations\r\n\r\nTransform images to better fit into layouts and to reduce memory size:\r\n\r\n    Picasso.With(context)\r\n           .Load(url)\r\n           .Resize(50, 50)\r\n           .CenterCrop()\r\n           .Into(imageView);\r\n\r\nYou can also specify custom transformations for more advanced effects:\r\n\r\n    public class CropSquareTransformation : Java.Lang.Object, ITransformation\r\n    {\r\n        public Bitmap Transform(Bitmap source)\r\n        {\r\n            int size = Math.Min(source.Width, source.Height);\r\n            int x = (source.Width() - size) / 2;\r\n            int y = (source.Height() - size) / 2;\r\n            Bitmap result = Bitmap.CreateBitmap(source, x, y, size, size);\r\n            if (result != source) {\r\n                source.Recycle();\r\n            }\r\n            return result;\r\n        }\r\n    \r\n        public string Key\r\n        {\r\n            get { return \"square()\"; } \r\n        }\r\n    }\r\n\r\nPass an instance of this class to the `Transform` method:\r\n\r\n    Picasso.With(context)\r\n           .Load(\"http://i.imgur.com/DvpvklR.png\")\r\n           .Transform(new CropSquareTransformation())\r\n           .Into(imageView);\r\n\r\n### Place Holders\r\n\r\nPicasso supports both download and error placeholders as optional features:\r\n\r\n    Picasso.With(context)\r\n           .Load(url)\r\n           .Placeholder(Resource.Drawable.placeholder)\r\n           .Error(Resource.Drawable.error)\r\n           .Into(imageView);\r\n\r\nA request will be retried three times before the error placeholder is shown.\r\n\r\n### Resource Loading\r\n\r\nResources, assets, files, content providers are all supported as image\r\nsources:\r\n\r\n    // resources\r\n    Picasso.With(context)\r\n           .Load(Resource.Drawable.landing_screen)\r\n           .Into(imageView1);\r\n    // assets\r\n    Picasso.With(context)\r\n           .Load(\"file:///android_asset/DvpvklR.png\")\r\n           .Into(imageView2);\r\n    // files\r\n    Picasso.With(context)\r\n           .Load(new File(\"...\"))\r\n           .Into(imageView3);\r\n","Hash":"d83c7efe84b19508a97cc4289b719d3a","TargetPlatforms":["android"],"TrialHash":null}